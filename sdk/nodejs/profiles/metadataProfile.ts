// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Profiles -->Metadata Profile resource.
 * For more information refer to [Metadata Profile](https://wiki.servarr.com/lidarr/settings#metadata-profiles) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as lidarr from "@maienm/pulumi-lidarr";
 *
 * const example = new lidarr.profiles.MetadataProfile("example", {
 *     name: "Example",
 *     primaryAlbumTypes: [
 *         1,
 *         2,
 *     ],
 *     releaseStatuses: [3],
 *     secondaryAlbumTypes: [1],
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import lidarr:Profiles/metadataProfile:MetadataProfile example 10
 * ```
 */
export class MetadataProfile extends pulumi.CustomResource {
    /**
     * Get an existing MetadataProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataProfileState, opts?: pulumi.CustomResourceOptions): MetadataProfile {
        return new MetadataProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lidarr:Profiles/metadataProfile:MetadataProfile';

    /**
     * Returns true if the given object is an instance of MetadataProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataProfile.__pulumiType;
    }

    /**
     * Metadata Profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Primary album types.
     */
    public readonly primaryAlbumTypes!: pulumi.Output<number[]>;
    /**
     * Release statuses.
     */
    public readonly releaseStatuses!: pulumi.Output<number[]>;
    /**
     * Secondary album types.
     */
    public readonly secondaryAlbumTypes!: pulumi.Output<number[]>;

    /**
     * Create a MetadataProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataProfileArgs | MetadataProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataProfileState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryAlbumTypes"] = state ? state.primaryAlbumTypes : undefined;
            resourceInputs["releaseStatuses"] = state ? state.releaseStatuses : undefined;
            resourceInputs["secondaryAlbumTypes"] = state ? state.secondaryAlbumTypes : undefined;
        } else {
            const args = argsOrState as MetadataProfileArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.primaryAlbumTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryAlbumTypes'");
            }
            if ((!args || args.releaseStatuses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseStatuses'");
            }
            if ((!args || args.secondaryAlbumTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryAlbumTypes'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryAlbumTypes"] = args ? args.primaryAlbumTypes : undefined;
            resourceInputs["releaseStatuses"] = args ? args.releaseStatuses : undefined;
            resourceInputs["secondaryAlbumTypes"] = args ? args.secondaryAlbumTypes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetadataProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetadataProfile resources.
 */
export interface MetadataProfileState {
    /**
     * Metadata Profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Primary album types.
     */
    primaryAlbumTypes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Release statuses.
     */
    releaseStatuses?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Secondary album types.
     */
    secondaryAlbumTypes?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a MetadataProfile resource.
 */
export interface MetadataProfileArgs {
    /**
     * Metadata Profile name.
     */
    name: pulumi.Input<string>;
    /**
     * Primary album types.
     */
    primaryAlbumTypes: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Release statuses.
     */
    releaseStatuses: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Secondary album types.
     */
    secondaryAlbumTypes: pulumi.Input<pulumi.Input<number>[]>;
}
