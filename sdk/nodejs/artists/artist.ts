// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Artists -->Artist resource.
 * For more information refer to [Artists](https://wiki.servarr.com/lidarr/library#artists) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as lidarr from "@maienm/pulumi-lidarr";
 *
 * const example = new lidarr.artists.Artist("example", {
 *     artistName: "Queen",
 *     foreignArtistId: "0383dadf-2a4e-4d10-a46a-e9e041da8eb3",
 *     metadataProfileId: 1,
 *     monitored: true,
 *     path: "/music/Queen",
 *     qualityProfileId: 1,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import lidarr:Artists/artist:Artist example 10
 * ```
 */
export class Artist extends pulumi.CustomResource {
    /**
     * Get an existing Artist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArtistState, opts?: pulumi.CustomResourceOptions): Artist {
        return new Artist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lidarr:Artists/artist:Artist';

    /**
     * Returns true if the given object is an instance of Artist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Artist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Artist.__pulumiType;
    }

    /**
     * Artist name.
     */
    public readonly artistName!: pulumi.Output<string>;
    /**
     * Foreign artist ID.
     */
    public readonly foreignArtistId!: pulumi.Output<string>;
    /**
     * List genres.
     */
    public /*out*/ readonly genres!: pulumi.Output<string[]>;
    /**
     * Metadata profile ID.
     */
    public readonly metadataProfileId!: pulumi.Output<number>;
    /**
     * Monitored flag.
     */
    public readonly monitored!: pulumi.Output<boolean>;
    /**
     * Overview.
     */
    public /*out*/ readonly overview!: pulumi.Output<string>;
    /**
     * Full artist path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Artist status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a Artist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArtistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArtistArgs | ArtistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArtistState | undefined;
            resourceInputs["artistName"] = state ? state.artistName : undefined;
            resourceInputs["foreignArtistId"] = state ? state.foreignArtistId : undefined;
            resourceInputs["genres"] = state ? state.genres : undefined;
            resourceInputs["metadataProfileId"] = state ? state.metadataProfileId : undefined;
            resourceInputs["monitored"] = state ? state.monitored : undefined;
            resourceInputs["overview"] = state ? state.overview : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ArtistArgs | undefined;
            if ((!args || args.artistName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artistName'");
            }
            if ((!args || args.foreignArtistId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'foreignArtistId'");
            }
            if ((!args || args.metadataProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadataProfileId'");
            }
            if ((!args || args.monitored === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitored'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.qualityProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfileId'");
            }
            resourceInputs["artistName"] = args ? args.artistName : undefined;
            resourceInputs["foreignArtistId"] = args ? args.foreignArtistId : undefined;
            resourceInputs["metadataProfileId"] = args ? args.metadataProfileId : undefined;
            resourceInputs["monitored"] = args ? args.monitored : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["genres"] = undefined /*out*/;
            resourceInputs["overview"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Artist.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Artist resources.
 */
export interface ArtistState {
    /**
     * Artist name.
     */
    artistName?: pulumi.Input<string>;
    /**
     * Foreign artist ID.
     */
    foreignArtistId?: pulumi.Input<string>;
    /**
     * List genres.
     */
    genres?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId?: pulumi.Input<number>;
    /**
     * Monitored flag.
     */
    monitored?: pulumi.Input<boolean>;
    /**
     * Overview.
     */
    overview?: pulumi.Input<string>;
    /**
     * Full artist path.
     */
    path?: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Artist status.
     */
    status?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Artist resource.
 */
export interface ArtistArgs {
    /**
     * Artist name.
     */
    artistName: pulumi.Input<string>;
    /**
     * Foreign artist ID.
     */
    foreignArtistId: pulumi.Input<string>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId: pulumi.Input<number>;
    /**
     * Monitored flag.
     */
    monitored: pulumi.Input<boolean>;
    /**
     * Full artist path.
     */
    path: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId: pulumi.Input<number>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
