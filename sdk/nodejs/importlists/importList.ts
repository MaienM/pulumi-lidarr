// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Import Lists -->Generic Import List resource. When possible use a specific resource instead.
 * For more information refer to [Import List](https://wiki.servarr.com/lidarr/settings#import-lists).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as lidarr from "@maienm/pulumi-lidarr";
 *
 * const example = new lidarr.importlists.ImportList("example", {
 *     enableAutomaticAdd: false,
 *     shouldMonitor: "entireArtist",
 *     shouldSearch: false,
 *     listType: "program",
 *     monitorNewItems: "all",
 *     rootFolderPath: lidarr_root_folder.example.path,
 *     qualityProfileId: lidarr_quality_profile.example.id,
 *     metadataProfileId: lidarr_metadata_profile.example.id,
 *     name: "Example",
 *     implementation: "LidarrImport",
 *     configContract: "LidarrSettings",
 *     tags: [
 *         1,
 *         2,
 *     ],
 *     tagIds: [
 *         1,
 *         2,
 *     ],
 *     profileIds: [1],
 *     baseUrl: "http://127.0.0.1:8686",
 *     apiKey: "APIKey",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import lidarr:ImportLists/importList:ImportList example 1
 * ```
 */
export class ImportList extends pulumi.CustomResource {
    /**
     * Get an existing ImportList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportListState, opts?: pulumi.CustomResourceOptions): ImportList {
        return new ImportList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lidarr:ImportLists/importList:ImportList';

    /**
     * Returns true if the given object is an instance of ImportList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportList.__pulumiType;
    }

    /**
     * Access token.
     */
    public readonly accessToken!: pulumi.Output<string>;
    /**
     * API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * Base URL.
     */
    public readonly baseUrl!: pulumi.Output<string>;
    /**
     * ImportList configuration template.
     */
    public readonly configContract!: pulumi.Output<string>;
    /**
     * Elements to pull from list.
     */
    public readonly countList!: pulumi.Output<number>;
    /**
     * Enable automatic add flag.
     */
    public readonly enableAutomaticAdd!: pulumi.Output<boolean>;
    /**
     * Expires.
     */
    public readonly expires!: pulumi.Output<string>;
    /**
     * ImportList implementation name.
     */
    public readonly implementation!: pulumi.Output<string>;
    /**
     * List ID.
     */
    public readonly listId!: pulumi.Output<string>;
    /**
     * List order.
     */
    public readonly listOrder!: pulumi.Output<number>;
    /**
     * List type.
     */
    public readonly listType!: pulumi.Output<string>;
    /**
     * Metadata profile ID.
     */
    public readonly metadataProfileId!: pulumi.Output<number>;
    /**
     * Monitor new items.
     */
    public readonly monitorNewItems!: pulumi.Output<string>;
    /**
     * Import List name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Playlist IDs.
     */
    public readonly playlistIds!: pulumi.Output<string[]>;
    /**
     * Profile IDs.
     */
    public readonly profileIds!: pulumi.Output<number[]>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Refresh token.
     */
    public readonly refreshToken!: pulumi.Output<string>;
    /**
     * Root folder path.
     */
    public readonly rootFolderPath!: pulumi.Output<string>;
    /**
     * Series ID.
     */
    public readonly seriesId!: pulumi.Output<string>;
    /**
     * Should monitor.
     */
    public readonly shouldMonitor!: pulumi.Output<string>;
    /**
     * Should monitor existing flag.
     */
    public readonly shouldMonitorExisting!: pulumi.Output<boolean>;
    /**
     * Should search flag.
     */
    public readonly shouldSearch!: pulumi.Output<boolean>;
    /**
     * Tag ID.
     */
    public readonly tagId!: pulumi.Output<string>;
    /**
     * Tag IDs.
     */
    public readonly tagIds!: pulumi.Output<number[]>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * User ID.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a ImportList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportListArgs | ImportListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportListState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["baseUrl"] = state ? state.baseUrl : undefined;
            resourceInputs["configContract"] = state ? state.configContract : undefined;
            resourceInputs["countList"] = state ? state.countList : undefined;
            resourceInputs["enableAutomaticAdd"] = state ? state.enableAutomaticAdd : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["implementation"] = state ? state.implementation : undefined;
            resourceInputs["listId"] = state ? state.listId : undefined;
            resourceInputs["listOrder"] = state ? state.listOrder : undefined;
            resourceInputs["listType"] = state ? state.listType : undefined;
            resourceInputs["metadataProfileId"] = state ? state.metadataProfileId : undefined;
            resourceInputs["monitorNewItems"] = state ? state.monitorNewItems : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["playlistIds"] = state ? state.playlistIds : undefined;
            resourceInputs["profileIds"] = state ? state.profileIds : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["refreshToken"] = state ? state.refreshToken : undefined;
            resourceInputs["rootFolderPath"] = state ? state.rootFolderPath : undefined;
            resourceInputs["seriesId"] = state ? state.seriesId : undefined;
            resourceInputs["shouldMonitor"] = state ? state.shouldMonitor : undefined;
            resourceInputs["shouldMonitorExisting"] = state ? state.shouldMonitorExisting : undefined;
            resourceInputs["shouldSearch"] = state ? state.shouldSearch : undefined;
            resourceInputs["tagId"] = state ? state.tagId : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ImportListArgs | undefined;
            if ((!args || args.configContract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configContract'");
            }
            if ((!args || args.listType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listType'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["baseUrl"] = args ? args.baseUrl : undefined;
            resourceInputs["configContract"] = args ? args.configContract : undefined;
            resourceInputs["countList"] = args ? args.countList : undefined;
            resourceInputs["enableAutomaticAdd"] = args ? args.enableAutomaticAdd : undefined;
            resourceInputs["expires"] = args ? args.expires : undefined;
            resourceInputs["implementation"] = args ? args.implementation : undefined;
            resourceInputs["listId"] = args ? args.listId : undefined;
            resourceInputs["listOrder"] = args ? args.listOrder : undefined;
            resourceInputs["listType"] = args ? args.listType : undefined;
            resourceInputs["metadataProfileId"] = args ? args.metadataProfileId : undefined;
            resourceInputs["monitorNewItems"] = args ? args.monitorNewItems : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["playlistIds"] = args ? args.playlistIds : undefined;
            resourceInputs["profileIds"] = args ? args.profileIds : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["refreshToken"] = args?.refreshToken ? pulumi.secret(args.refreshToken) : undefined;
            resourceInputs["rootFolderPath"] = args ? args.rootFolderPath : undefined;
            resourceInputs["seriesId"] = args ? args.seriesId : undefined;
            resourceInputs["shouldMonitor"] = args ? args.shouldMonitor : undefined;
            resourceInputs["shouldMonitorExisting"] = args ? args.shouldMonitorExisting : undefined;
            resourceInputs["shouldSearch"] = args ? args.shouldSearch : undefined;
            resourceInputs["tagId"] = args ? args.tagId : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "apiKey", "refreshToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ImportList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImportList resources.
 */
export interface ImportListState {
    /**
     * Access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * ImportList configuration template.
     */
    configContract?: pulumi.Input<string>;
    /**
     * Elements to pull from list.
     */
    countList?: pulumi.Input<number>;
    /**
     * Enable automatic add flag.
     */
    enableAutomaticAdd?: pulumi.Input<boolean>;
    /**
     * Expires.
     */
    expires?: pulumi.Input<string>;
    /**
     * ImportList implementation name.
     */
    implementation?: pulumi.Input<string>;
    /**
     * List ID.
     */
    listId?: pulumi.Input<string>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * List type.
     */
    listType?: pulumi.Input<string>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId?: pulumi.Input<number>;
    /**
     * Monitor new items.
     */
    monitorNewItems?: pulumi.Input<string>;
    /**
     * Import List name.
     */
    name?: pulumi.Input<string>;
    /**
     * Playlist IDs.
     */
    playlistIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Profile IDs.
     */
    profileIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Refresh token.
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * Root folder path.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Series ID.
     */
    seriesId?: pulumi.Input<string>;
    /**
     * Should monitor.
     */
    shouldMonitor?: pulumi.Input<string>;
    /**
     * Should monitor existing flag.
     */
    shouldMonitorExisting?: pulumi.Input<boolean>;
    /**
     * Should search flag.
     */
    shouldSearch?: pulumi.Input<boolean>;
    /**
     * Tag ID.
     */
    tagId?: pulumi.Input<string>;
    /**
     * Tag IDs.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * User ID.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImportList resource.
 */
export interface ImportListArgs {
    /**
     * Access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * ImportList configuration template.
     */
    configContract: pulumi.Input<string>;
    /**
     * Elements to pull from list.
     */
    countList?: pulumi.Input<number>;
    /**
     * Enable automatic add flag.
     */
    enableAutomaticAdd?: pulumi.Input<boolean>;
    /**
     * Expires.
     */
    expires?: pulumi.Input<string>;
    /**
     * ImportList implementation name.
     */
    implementation?: pulumi.Input<string>;
    /**
     * List ID.
     */
    listId?: pulumi.Input<string>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * List type.
     */
    listType: pulumi.Input<string>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId?: pulumi.Input<number>;
    /**
     * Monitor new items.
     */
    monitorNewItems?: pulumi.Input<string>;
    /**
     * Import List name.
     */
    name: pulumi.Input<string>;
    /**
     * Playlist IDs.
     */
    playlistIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Profile IDs.
     */
    profileIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Refresh token.
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * Root folder path.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Series ID.
     */
    seriesId?: pulumi.Input<string>;
    /**
     * Should monitor.
     */
    shouldMonitor?: pulumi.Input<string>;
    /**
     * Should monitor existing flag.
     */
    shouldMonitorExisting?: pulumi.Input<boolean>;
    /**
     * Should search flag.
     */
    shouldSearch?: pulumi.Input<boolean>;
    /**
     * Tag ID.
     */
    tagId?: pulumi.Input<string>;
    /**
     * Tag IDs.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * User ID.
     */
    userId?: pulumi.Input<string>;
}
